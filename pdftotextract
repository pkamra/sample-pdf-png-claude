#Use textract to extract from png files.
import json
import os
import json
import logging
import base64
import boto3
import fitz  # PyMuPDF library for PDF processing
import re
from textractor import Textractor
from textractor.visualizers.entitylist import EntityList
from textractor.data.constants import TextractFeatures
from textractor.data.text_linearization_config import TextLinearizationConfig

# Configure logging
logger = logging.getLogger()
logger.setLevel(logging.INFO)

os.environ["LD_LIBRARY_PATH"] = f"/opt/python/bin/:{os.environ['LD_LIBRARY_PATH']}"
os.environ["PATH"] = f"/opt/python/bin/:{os.environ['PATH']}"

# Initialize S3 clients
s3_client = boto3.client('s3')
extractor = Textractor(region_name="us-east-1")


# Retrieve the target S3 bucket from environment variables
target_bucket = os.environ['TARGET_S3_BUCKET']

def pdf_to_png(pdf_file, output_folder):
    # Create output folder if it doesn't exist
    if not os.path.exists(output_folder):
        os.makedirs(output_folder)
    
    # Open the PDF file
    pdf_document = fitz.open(pdf_file)
    
    # Iterate through each page
    for page_num in range(len(pdf_document)):
        # Get the page
        page = pdf_document.load_page(page_num)
        
        # Render the page as an image
        pix = page.get_pixmap(alpha=False)
        
        # Save the image as PNG
        pix.save(os.path.join(output_folder, f"page_{page_num+1}.png"))

    # Close the PDF document
    pdf_document.close()
    
    
    # Define a function to extract the numeric part of the filename
def extract_page_number(filename):
    match = re.match(r"page_(\d+)\.png", filename)
    if match:
        return int(match.group(1))
    else:
        return float('inf')  # Return a large value for filenames that don't match the pattern
        

# Function to process each image
def process_image(image_path, page_number, text_file):
    
    document = extractor.analyze_document(
                file_source=image_path,
                features=[TextractFeatures.LAYOUT,TextractFeatures.TABLES,TextractFeatures.FORMS,TextractFeatures.SIGNATURES],  
                save_image=False,
    )
    config = TextLinearizationConfig(
        hide_figure_layout=True,   
        hide_header_layout=True,    
        table_prefix="<table>",
        table_suffix="</table>",
        title_prefix="# ",
        section_header_prefix="## ",
        selection_element_selected="[X]",
        selection_element_not_selected="[]",
        signature_token="[SIGNATURE]",
    )


    # For demonstration purpose, here we just print the image path
    logger.info("Processing image: %s", image_path)
    
        
    # Process the response (replace this with actual processing of response)
    logger.info("Data : %s", document.get_text(config=config))
    
    # Write output to text file
    text_file.write(f"Page Number: {page_number}\n")
    content_text = document.get_text(config=config)
    # Neatly formatting the text
    formatted_text = "\n".join(line.strip() for line in content_text.split("\n"))
    text_file.write(formatted_text + "\n\n")
        
def lambda_handler(event, context):
    # Retrieve the S3 bucket and key from the event
    source_bucket = event['Records'][0]['s3']['bucket']['name']
    source_key = event['Records'][0]['s3']['object']['key']
    
    # Download the PDF file from the source bucket to /tmp directory
    pdf_file = '/tmp/' + os.path.basename(source_key)
    s3_client.download_file(source_bucket, source_key, pdf_file)
    
    # Output folder for PNG files
    output_folder = '/tmp/png-output/'
    
    # Convert the PDF to PNG files
    pdf_to_png(pdf_file, output_folder)
    
    # Output text file path
    output_file_path = '/tmp/output-text-file.txt'

    # Process each PNG file in the folder
    with open(output_file_path, "a") as text_file:
        # Sort the filenames numerically
        sorted_filenames = sorted(os.listdir(output_folder), key=extract_page_number)
        for page_number, filename in enumerate(sorted_filenames, start=1):
            if filename.endswith(".png"):
                image_path = os.path.join(output_folder, filename)
                process_image(image_path, page_number, text_file)
                logger.info("Image processed: %s", filename)

    # Upload the output text file to the target S3 bucket

    target_key = os.path.join('output', source_key+".txt")
    s3_client.upload_file(output_file_path, target_bucket, target_key)

    logger.info("Processing completed.")
    
    return {
        'statusCode': 200,
        'body': json.dumps('Hello from Lambda!')
    }


